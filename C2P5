#include <stdio.h>
#include <string.h>
#include <time.h>

#define MAX_LEN 51  // 50 characters max + null
#define NUM_QUESTIONS 3

// Simple member structure
struct Member {
    char name[20];
    char nickname[10];
};

// Fixed members (immutable)
const struct Member members[] = {
    {"Youngjin", "YJ"},
    {"Arthur", "Art"},
    {"Mina", "MN"},
    {"Jisoo", "JS"},
    {"Hana", "HN"},
    {"Leo", "L"},
    {"Sora", "SR"}
};

const char questions[NUM_QUESTIONS][50] = {
    "What did you accomplish today?",
    "What difficulties did you overcome?",
    "What are your plans for tomorrow?"
};

// Get today's date
void getToday(char *date) {
    time_t now = time(NULL);
    struct tm *t = localtime(&now);
    sprintf(date, "%04d-%02d-%02d", t->tm_year + 1900, t->tm_mon + 1, t->tm_mday);
}

// Perform reflection
void doSelfReflection() {
    int choice;
    char answers[NUM_QUESTIONS][MAX_LEN];
    char date[11];

    printf("\nChoose a member:\n");
    for (int i = 0; i < 7; i++) {
        printf("%d. %s (%s)\n", i + 1, members[i].name, members[i].nickname);
    }
    printf("Enter number (1-7): ");
    scanf("%d%*c", &choice);  // skip newline

    if (choice < 1 || choice > 7) {
        printf("Invalid choice.\n");
        return;
    }

    getToday(date);
    printf("\nDate: %s\n", date);

    // Ask each question
    for (int i = 0; i < NUM_QUESTIONS; i++) {
        do {
            printf("\n%s\n> ", questions[i]);
            fgets(answers[i], MAX_LEN, stdin);
            answers[i][strcspn(answers[i], "\n")] = 0;  // remove newline
            if (strlen(answers[i]) < 20 || strlen(answers[i]) > 50) {
                printf("Answer must be between 20 and 50 characters.\n");
            }
        } while (strlen(answers[i]) < 20 || strlen(answers[i]) > 50);
    }

    // Display answers
    printf("\n--- Reflection by %s (%s) on %s ---\n", 
           members[choice - 1].name, members[choice - 1].nickname, date);
    for (int i = 0; i < NUM_QUESTIONS; i++) {
        printf("Q: %s\nA: %s\n\n", questions[i], answers[i]);
    }
}
